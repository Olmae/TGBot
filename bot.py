import telegram
import config
import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
import logging
import json
import os
from telegram.ext import Updater, CommandHandler
from telebot.types import ReplyKeyboardMarkup, KeyboardButton


bot = telebot.TeleBot(config.TOKEN)



scheduler = BackgroundScheduler()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USER_DATA_FILE = 'user_data.json'
USER_LINKS_COUNT_FILE = 'user_links_count.json'
ALL_USERS_FILE = 'all_users.json'
SENT_DATA_FILE = 'sent_data.json'

# –õ–∏–º–∏—Ç—ã —Å—Å—ã–ª–æ–∫
USER_WEEKLY_LIMIT = 6
TOTAL_WEEKLY_LIMIT = 36

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_json_file(filename):
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = f.read().strip()
                if not data:
                    return {}
                return json.loads(data)
        except json.JSONDecodeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filename}: {e}")
            return {}
        except IOError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            return {}
    return {}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–∞—Ö —Ä–µ—à–µ–Ω–∏–π
DECISION_DATA_FILE = 'decision_data.json'
LINKS_HISTORY_FILE = 'links_history.json'

@bot.message_handler(commands=['info'])
def send_info(message):
    info_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É:\n\n"
        "1. –ù–∞–ø–∏—à–∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://example.com, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë.\n"
        "2. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–æ–∫. –ï—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, "
        "–±–æ—Ç —Å–æ–æ–±—â–∏—Ç —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.\n"
        "3. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –ø—Ä–æ–π–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è –∏/–∏–ª–∏ —Ä–æ–¥ —Å–ª–æ–≤–∞ —Ä–∞–∑–º–µ—â–µ–Ω–æ.\n"
        "4. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é.\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
    )
    bot.send_message(message.chat.id, info_text)



# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Å—ã–ª–∫–∞—Ö –∏ –¥–∞—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
def load_links_history():
    return load_json_file(LINKS_HISTORY_FILE)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫
def save_links_history(data):
    save_json_file(LINKS_HISTORY_FILE, data)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–∞—Ö
def load_decision_data():
    return load_json_file(DECISION_DATA_FILE)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–∞—Ö
def save_decision_data(data):
    save_json_file(DECISION_DATA_FILE, data)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–∞—Ö —Ä–µ—à–µ–Ω–∏–π
decision_data = load_decision_data()


@bot.message_handler(commands=['manager_menu'])
def manager_menu(message):
    if message.chat.id != config.MANAGER_CHAT_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    users_button = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    send_reminder_button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    stats_button = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    change_link_limits = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã —Å—Å—ã–ª–æ–∫")

    markup.add(users_button, send_reminder_button, stats_button, change_link_limits)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def remove_user(message):
    if message.chat.id != config.MANAGER_CHAT_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

    @bot.message_handler(func=lambda message: message.text.isdigit())
    def process_user_removal(message):
        user_id_to_remove = int(message.text)

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤
        if user_id_to_remove in user_data:
            del user_data[user_id_to_remove]
            save_json_file(USER_DATA_FILE, user_data)
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_remove} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã —Å—Å—ã–ª–æ–∫")
def change_link_limits(message):
    if message.chat.id != config.MANAGER_CHAT_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6):")

    @bot.message_handler(func=lambda message: message.text.isdigit())
    def process_limit_change(message):
        new_limit = int(message.text)
        global USER_WEEKLY_LIMIT
        USER_WEEKLY_LIMIT = new_limit
        bot.send_message(message.chat.id, f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_limit}.")


@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
def send_reminder_to_all(message):
    if message.chat.id != config.MANAGER_CHAT_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return

    send_daily_reminder()
    bot.send_message(message.chat.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
def show_statistics(message):
    if message.chat.id != config.MANAGER_CHAT_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return

    total_users = len(all_users)
    total_links_sent = sum(user_links_count.values())
    bot.send_message(message.chat.id,
                     f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {total_links_sent}")






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
def save_json_file(filename, data):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except IOError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {filename}: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
user_data = load_json_file(USER_DATA_FILE)
user_links_count = load_json_file(USER_LINKS_COUNT_FILE)
all_users = set(load_json_file(ALL_USERS_FILE).keys())  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def load_sent_data():
    return load_json_file(SENT_DATA_FILE) or []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def save_sent_data(data):
    save_json_file(SENT_DATA_FILE, data)

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def send_daily_reminder():
    global all_users
    for chat_id in list(all_users):
        try:
            bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∞–π—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ–≥–æ–¥–Ω—è!")
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 403:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
                all_users.discard(chat_id)
                save_json_file(ALL_USERS_FILE, {uid: True for uid in all_users})
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

scheduler.add_job(
    send_daily_reminder,
    'interval',
    days=1,
    start_date=(datetime.now() if datetime.now().hour < 9 else datetime.now().replace(hour=9) + timedelta(days=1))
)
scheduler.start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_reminder
@bot.message_handler(commands=['test_reminder'])
def test_reminder(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...")
    send_daily_reminder()

from datetime import datetime, timedelta

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
def can_send_link(user_id, link):
    links_history = load_links_history()

    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
    if link in links_history:
        last_sent = datetime.strptime(links_history[link], "%Y-%m-%d %H:%M:%S")
        days_since_last_sent = (datetime.now() - last_sent).days
        if days_since_last_sent < 90:  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 90 –¥–Ω–µ–π
            # –°—á–∏—Ç–∞–µ–º, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
            next_send_date = last_sent + timedelta(days=90)
            return False, last_sent, next_send_date
    return True, None, None



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ —Å –¥–∞—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
def save_link(user_id, link):
    links_history = load_links_history()
    links_history[link] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    save_links_history(links_history)


import re

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
@bot.message_handler(func=lambda message: 'link' not in user_data.get(message.chat.id, {}))
def get_link(message):
    if message.text.startswith("http"):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
        all_users.add(message.chat.id)
        save_json_file(ALL_USERS_FILE, {uid: True for uid in all_users})

        link = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
        url_pattern = re.compile(r'^(https?://[^\s]+)$')
        if not url_pattern.match(link):
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com).")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
        can_send, last_sent_date, next_send_date = can_send_link(message.chat.id, link)
        if not can_send:  # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
            last_sent_date_str = last_sent_date.strftime("%d %B %Y")  # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            next_send_date_str = next_send_date.strftime("%d %B %Y")  # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            months = {
                'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞', 'April': '–∞–ø—Ä–µ–ª—è',
                'May': '–º–∞—è', 'June': '–∏—é–Ω—è', 'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
                'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
            }

            # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
            last_sent_date_str = last_sent_date_str.replace(last_sent_date.strftime("%B"),
                                                            months[last_sent_date.strftime("%B")])
            next_send_date_str = next_send_date_str.replace(next_send_date.strftime("%B"),
                                                            months[next_send_date.strftime("%B")])

            bot.send_message(message.chat.id,
                             f"–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {last_sent_date_str}. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë —Å–Ω–æ–≤–∞ {next_send_date_str}.")
            return

        if message.chat.id not in user_data:
            user_data[message.chat.id] = {}

        user_data[message.chat.id]['link'] = link
        save_json_file(USER_DATA_FILE, user_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        save_link(message.chat.id, link)

        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Å—ã–ª–∫—É. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: ####).")



def lowercase_first_char(text):
    if not text:
        return text
    return text[0].lower() + text[1:]

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@bot.message_handler(func=lambda message: 'gender_selection' in user_data.get(message.chat.id, {}))
def handle_gender_selection(message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä –ø–æ–ª–∞ –æ—Ç {message.chat.id}: {message.text}")

    gender = message.text.strip()
    valid_genders = ["—Ä–∞–∑–º–µ—â–µ–Ω", "—Ä–∞–∑–º–µ—â–µ–Ω–∞", "—Ä–∞–∑–º–µ—â–µ–Ω–æ"]

    if gender not in valid_genders:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª: —Ä–∞–∑–º–µ—â–µ–Ω, —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ.")
        return

    decision_number = user_data[message.chat.id].pop('gender_selection', None)

    if not decision_number:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –≤ decision_data
    decision_data[decision_number] = gender
    save_decision_data(decision_data)

    user_data[message.chat.id]['gender'] = gender
    save_json_file(USER_DATA_FILE, user_data)

    sent_data = load_sent_data()
    existing_data = next((item for item in sent_data if item['decision_number'] == decision_number), None)

    logging.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è {decision_number}: {existing_data}")

    if existing_data:
        data_text = existing_data.get('data', '')

        final_message = (
            f"{user_data[message.chat.id].get('link', '')} "
            f"{gender} "
            f"{lowercase_first_char(data_text)}"
            f"(–í–∫–ª—é—á—ë–Ω –≤ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {decision_number})"
        )

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        confirm_button = types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        restart_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        markup.add(confirm_button, restart_button)

        bot.send_message(message.chat.id,
                         f"–í–æ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{final_message}\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
                         reply_markup=markup)

        user_data[message.chat.id]['final_message'] = final_message
        save_json_file(USER_DATA_FILE, user_data)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –∏–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª"
@bot.message_handler(func=lambda message: message.text in ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª"])
def handle_confirmation(message):
    markup = types.ReplyKeyboardRemove()  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        final_message = user_data[message.chat.id].get('final_message', '')

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            bot.send_message(-4223848296, final_message)
        except telebot.apihelper.ApiTelegramException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=markup)
            return

        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=markup)
        user_data[message.chat.id] = {}
        save_json_file(USER_DATA_FILE, user_data)

    elif message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è –µ—â—ë —Ä–∞–∑.", reply_markup=markup)
        user_data[message.chat.id] = {}
        save_json_file(USER_DATA_FILE, user_data)

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª –∑–∞–Ω–æ–≤–æ
        ask_for_gender(message)

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞
        user_data[message.chat.id].pop('gender', None)
        save_json_file(USER_DATA_FILE, user_data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª–∞
def ask_for_gender(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    male_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω")
    female_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω–∞")
    neutral_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω–æ")
    markup.add(male_button, female_button, neutral_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª: —Ä–∞–∑–º–µ—â–µ–Ω, —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["—Ä–∞–∑–º–µ—â–µ–Ω", "—Ä–∞–∑–º–µ—â–µ–Ω–∞", "—Ä–∞–∑–º–µ—â–µ–Ω–æ"])
def handle_gender_change(message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª
    new_gender = message.text.strip()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.chat.id]['gender'] = new_gender
    save_json_file(USER_DATA_FILE, user_data)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è
    decision_number = user_data[message.chat.id].get('decision_number')
    if not decision_number:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è
    sent_data = load_sent_data()
    existing_data = next((item for item in sent_data if item['decision_number'] == decision_number), None)

    if not existing_data:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_message = (
        f"{user_data[message.chat.id].get('link', '')} "
        f"{new_gender} "
        f"{lowercase_first_char(existing_data.get('data', ''))}"
        f"(–í–∫–ª—é—á—ë–Ω –≤ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {decision_number})"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    user_data[message.chat.id]['final_message'] = final_message
    save_json_file(USER_DATA_FILE, user_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    confirm_button = types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
    restart_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    change_gender_button = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª")
    markup.add(confirm_button, restart_button, change_gender_button)

    bot.send_message(
        message.chat.id,
        f"–í–æ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{final_message}\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª.",
        reply_markup=markup
    )
@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª")
def prompt_for_gender_change(message):
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω")
    button2 = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω–∞")
    button3 = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω–æ")
    markup.add(button1, button2, button3)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª: —Ä–∞–∑–º–µ—â–µ–Ω, —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ.", reply_markup=markup)





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∞ —Ä–µ—à–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω)
def get_gender_from_decision_data(decision_number):
    return decision_data.get(decision_number)


@bot.message_handler(func=lambda message: 'decision_number' not in user_data.get(message.chat.id, {}) and 'gender_selection' not in user_data.get(message.chat.id, {}))
def get_decision_number(message):
    decision_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —ç—Ç–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
    if not decision_text.isdigit() or len(decision_text) < 1:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è.")
        return

    sent_data = load_sent_data()
    existing_data = next((item for item in sent_data if item['decision_number'] == decision_text), None)

    if not existing_data:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è
    user_data[message.chat.id]['decision_number'] = decision_text
    save_json_file(USER_DATA_FILE, user_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ä–µ—à–µ–Ω–∏—è
    gender = get_gender_from_decision_data(decision_text)

    if gender:
        # –ï—Å–ª–∏ –ø–æ–ª —É–∂–µ –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_message = (
            f"{user_data[message.chat.id].get('link', '')} "
            f"{gender} "
            f"{existing_data.get('data', '').lower()}"
            f"(–í–∫–ª—é—á—ë–Ω –≤ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {decision_text})"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        confirm_button = types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        restart_button = types.KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        change_gender_button = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª")
        markup.add(confirm_button, restart_button, change_gender_button)

        bot.send_message(
            message.chat.id,
            f"–í–æ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{final_message}\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª.",
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        user_data[message.chat.id]['final_message'] = final_message
        save_json_file(USER_DATA_FILE, user_data)

    else:
        # –ï—Å–ª–∏ –ø–æ–ª –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        male_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω")
        female_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω–∞")
        neutral_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω–æ")
        markup.add(male_button, female_button, neutral_button)

        data_preview = existing_data.get('data', '').lower()
        bot.send_message(
            message.chat.id,
            f"–î–∞–Ω–Ω—ã–µ: {data_preview}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª: —Ä–∞–∑–º–µ—â–µ–Ω, —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ.",
            reply_markup=markup
        )

        user_data[message.chat.id]['gender_selection'] = decision_text
        save_json_file(USER_DATA_FILE, user_data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –∏–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª"
@bot.message_handler(func=lambda message: message.text in ["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª"])
def handle_confirmation(message):
    markup = types.ReplyKeyboardRemove()  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        final_message = user_data[message.chat.id].get('final_message', '')

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            bot.send_message(-4223848296, final_message)
        except telebot.apihelper.ApiTelegramException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=markup)
            return

        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=markup)
        user_data[message.chat.id] = {}
        save_json_file(USER_DATA_FILE, user_data)

    elif message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è –µ—â—ë —Ä–∞–∑.", reply_markup=markup)
        user_data[message.chat.id] = {}
        save_json_file(USER_DATA_FILE, user_data)

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª –∑–∞–Ω–æ–≤–æ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        male_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω")
        female_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω–∞")
        neutral_button = types.KeyboardButton("—Ä–∞–∑–º–µ—â–µ–Ω–æ")
        markup.add(male_button, female_button, neutral_button)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª: —Ä–∞–∑–º–µ—â–µ–Ω, —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ.", reply_markup=markup)
        user_data[message.chat.id].pop('gender', None)  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞
        save_json_file(USER_DATA_FILE, user_data)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except telebot.apihelper.ApiTelegramException as e:
        logging.error(f'–û—à–∏–±–∫–∞ API Telegram: {e}')
    except ConnectionError as e:
        logging.error(f'–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}')
    except Exception as r:
        logging.error(f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {r}')
    finally:
        logging.info("–ó–¥–µ—Å—å –≤—Å—ë –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å")
